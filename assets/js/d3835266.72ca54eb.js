"use strict";(self.webpackChunkdomicilio=self.webpackChunkdomicilio||[]).push([[9395],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),l=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return o.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(t),m=r,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return t?o.createElement(f,i(i({ref:n},u),{},{components:t})):o.createElement(f,i({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[p]="string"==typeof e?e:r,i[1]=c;for(var l=2;l<a;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3166:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const a={},i=void 0,c={unversionedId:"Tecnolog\xedas/Mutiny",id:"Tecnolog\xedas/Mutiny",title:"Mutiny",description:"Mutiny",source:"@site/docs/Tecnolog\xedas/Mutiny.md",sourceDirName:"Tecnolog\xedas",slug:"/Tecnolog\xedas/Mutiny",permalink:"/domicilio/docs/Tecnolog\xedas/Mutiny",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Tecnolog\xedas/Mutiny.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MongoDB",permalink:"/domicilio/docs/Tecnolog\xedas/MongoDB"},next:{title:"Programaci\xf3n Reactiva",permalink:"/domicilio/docs/Tecnolog\xedas/Programaci\xf3n Reactiva"}},s={},l=[{value:"Mutiny",id:"mutiny",level:3}],u={toc:l},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"mutiny"},"Mutiny"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://es.quarkus.io/guides/mutiny-primer"},"Mutiny")," es una biblioteca de programaci\xf3n intuitiva y reactiva. Es el modelo principal para escribir aplicaciones reactivas con Quarkus.\nCon Mutiny todo est\xe1 orientado a eventos: se reciben eventos y se reacciona a ellos. Este aspecto orientado a eventos abarca la naturaleza as\xedncrona de los sistemas distribuidos y proporciona una forma elegante y precisa de expresar continuaci\xf3n."),(0,r.kt)("p",null,"Mutiny ofrece dos tipos que son a la vez impulsados por eventos:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Un Uni emite un \xfanico evento (un elemento o un fallo). Los Unis son convenientes para representar acciones as\xedncronas que devuelven 0 o 1 resultado. Un buen ejemplo es el resultado de enviar un mensaje a la cola de un corredor de mensajes.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Un Multi emite m\xfaltiples eventos (n \xedtems, 1 fallo o 1 finalizaci\xf3n). Los Multi pueden representar flujos de elementos, potencialmente ilimitados. Un buen ejemplo es la recepci\xf3n de mensajes de una cola de agentes de mensajes."))),(0,r.kt)("p",null,'Estos dos tipos permiten representar cualquier tipo de interacci\xf3n. Son fuentes de eventos. Son observados (suscripci\xf3n) y se recibe una notificaci\xf3n cuando emiten un elemento, un fallo o, en el caso de un Multi acotado, un evento de finalizaci\xf3n. Cuando se recibe el evento (el suscriptor), se puede procesar (por ejemplo, transformarlo, filtrarlo). Con Mutiny, se va a escribir c\xf3digo como onX().action(), que se lee como "on item X do action".'))}d.isMDXComponent=!0}}]);