"use strict";(self.webpackChunkdomicilio=self.webpackChunkdomicilio||[]).push([[3594],{3905:(e,n,a)=>{a.d(n,{Zo:()=>l,kt:()=>y});var t=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=t.createContext({}),p=function(e){var n=t.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},l=function(e){var n=p(e.components);return t.createElement(c.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),m=p(a),u=i,y=m["".concat(c,".").concat(u)]||m[u]||d[u]||r;return a?t.createElement(y,s(s({ref:n},l),{},{components:a})):t.createElement(y,s({ref:n},l))}));function y(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=u;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[m]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=a[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8518:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var t=a(7462),i=(a(7294),a(3905));const r={sidebar_position:5},s="Despliegue (deployment) del proyecto en Kubernetes",o={unversionedId:"Versi\xf3n 2 - Backend/Subir-imagenes-Kubernetes",id:"Versi\xf3n 2 - Backend/Subir-imagenes-Kubernetes",title:"Despliegue (deployment) del proyecto en Kubernetes",description:"Este proceso involucra tres pasos:",source:"@site/docs/Versi\xf3n 2 - Backend/Subir-imagenes-Kubernetes.md",sourceDirName:"Versi\xf3n 2 - Backend",slug:"/Versi\xf3n 2 - Backend/Subir-imagenes-Kubernetes",permalink:"/domicilio/docs/Versi\xf3n 2 - Backend/Subir-imagenes-Kubernetes",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Versi\xf3n 2 - Backend/Subir-imagenes-Kubernetes.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Compilaci\xf3n del c\xf3digo (build)",permalink:"/domicilio/docs/Versi\xf3n 2 - Backend/compilacion"},next:{title:"Panel de Control de Kubernetes",permalink:"/domicilio/docs/Versi\xf3n 2 - Backend/Verificacion-Kubernetes"}},c={},p=[],l={toc:p},m="wrapper";function d(e){let{components:n,...a}=e;return(0,i.kt)(m,(0,t.Z)({},l,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"despliegue-deployment-del-proyecto-en-kubernetes"},"Despliegue (deployment) del proyecto en Kubernetes"),(0,i.kt)("admonition",{title:"Ejecuci\xf3n del proceso",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Este proceso involucra tres pasos:  "),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Configuraci\xf3n de bases de datos  "),(0,i.kt)("li",{parentName:"ul"},"Despliegue (Deployment) de las im\xe1genes  "),(0,i.kt)("li",{parentName:"ul"},"Configuraci\xf3n del servicio "))),(0,i.kt)("p",null,"En el directorio del proyecto, (por ejemplo: C:\\Users\\f-perez\\IdeaProjects\\compras-programadas V2), se ubica el archivo:",(0,i.kt)("br",{parentName:"p"}),"\n","database-config-localhost.yaml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="database-config-localhost.yaml"',title:'"database-config-localhost.yaml"'},'apiVersion: v1\nkind: Secret\nmetadata:\n  name: database-config-atlas\n  namespace: app-domicilio\ntype: Opaque\nstringData:\n  country-name: "Chile"\n  cloud-name: "azure"\n  database-name: "appDomicilio"\n  nosql-type: "mongodb"\n  nosql-uri: "mongodb://mongodb://192.168.1.104:27017/?readPreference=primary&directConnection=true&ssl=false"\n  pickup-app-monitoreo: "https://monitoreo-pickup.loca.lt"\n  pickup-jwt-token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImlhdCI6MTY3ODIyOTM0OCwiZXhwIjowfQ.eyJJZCI6IktGQyBBUFAiLCJOYW1lIjoiQXBwIERvbWljaWxpbyBQaWNrdXAifQ.usRBGUuvL3BO4c-PmiP7jyXczB3DNMFTKjl4RPa5EdNXoa1SZGCJZ20B0m2cBg8cEW1tln8gB-UilfXfZAJJ3k245jXI3SklInRmoRsKlwSJ8O96hFlf9gk86zcp8Srx9xjoep8QBJKLBkwgAuisrPh9brj6wyxbw3s4kahcPFTJKF40pdJuE1jcH1GBtAlprx6WAfzVGvx_Q0IeIRFJup1FfNQybXyPig15Ey-Oywhwchgq_I6S8WmFztWrYOODcHhW_2UnaQg1S4vsghZXPs597LaVMH5ckH7gebZjoN5r-kgVNcvzqlsq9sccUiQWfYG5OnVi1twJ1d1ByorKjw"\n  k8s-client-namespace: "app-domicilio"\n')),(0,i.kt)("p",null,"Se ejecuta el siguiente comando:  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl apply -f "C:\\Users\\f-perez\\IdeaProjects\\compras-programadas V2\\uk8s-resources\\kubernetes\\config-k8s\\database-config-localhost.yaml"\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Resultado:  "),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"secret/database-config-atlas configured\n"))),(0,i.kt)("p",null,"Posteriormente, se ubica el segundo archivo manifiesto, install-localhost.yaml, el cual contiene las especificaciones necesarias para efectuar el despliegue y la creaci\xf3n del servicio:  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="install-localhost.yaml"',title:'"install-localhost.yaml"'},'apiVersion: v1\nkind: Namespace\nmetadata:\n  name: app-domicilio\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: distribuidor-queue\n  namespace: app-domicilio\nroleRef:\n  kind: Role\n  name: distribuidor-queue\n  apiGroup: rbac.authorization.k8s.io\nsubjects:\n  - kind: ServiceAccount\n    name: distribuidor-queue\n    namespace: app-domicilio\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: distribuidor-queue\n  namespace: app-domicilio\nrules:\n  - apiGroups: [""]\n    resources: ["pods"]\n    verbs: ["list", "watch", "get"]\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: distribuidor-queue\n  namespace: app-domicilio\n---\n# API DOMICILIO DEPLOYMENT\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api-domicilio\n  namespace: app-domicilio\nspec:\n  selector:\n    matchLabels:\n      app: client\n      tier: api-domicilio\n      track: stable\n  replicas: 1\n  revisionHistoryLimit: 3\n  template:\n    metadata:\n      labels:\n        app: client\n        tier: api-domicilio\n        track: stable\n    spec:\n      containers:\n        - name: api-domicilio\n          image: "kfcregistry.azurecr.io/pedidos-app-ec/api-domicilio:2.0.2"\n          imagePullPolicy: Never\n          env:\n            - name: COUNTRY_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: country-name\n                  name: database-config-atlas\n            - name: CLOUD_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: cloud-name\n                  name: database-config-atlas\n            - name: NOSQL_TYPE\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-type\n                  name: database-config-atlas\n            - name: NOSQL_URI\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-uri\n                  name: database-config-atlas\n            - name: NOSQL_COSMOSDB_HOST\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-cosmosdb-host\n                  name: database-config-atlas\n            - name: NOSQL_COSMOSDB_MASTERKEY\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-cosmosdb-masterkey\n                  name: database-config-atlas\n            - name: DATABASE_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: database-name\n                  name: database-config-atlas\n            - name: URL_AZURE_SQL_SERVER\n              valueFrom:\n                secretKeyRef:\n                  key: url-azure-sql-server\n                  name: database-config-atlas\n            - name: URL_AZURE_API_DOMICILIO\n              valueFrom:\n                secretKeyRef:\n                  key: url-azure-api-domicilio\n                  name: database-config-atlas\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: api-domicilio\n  namespace: app-domicilio\nspec:\n  selector:\n    app: client\n    tier: api-domicilio\n  ports:\n    - name: http\n      protocol: "TCP"\n      port: 8080\n      targetPort: 80\n    - name: https\n      protocol: "TCP"\n      port: 4443\n      targetPort: 80\n  type: LoadBalancer\n---\n###\n### API DOMICILIO\n###\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: api-domicilio\n  namespace: app-domicilio\nspec:\n  ingressClassName: kong\n  rules:\n    - http:\n        paths:\n          - path: /api/restApp\n            pathType: ImplementationSpecific\n            backend:\n              service:\n                name: api-domicilio\n                port:\n                  number: 8080\n          - path: /api/v3/restApp\n            pathType: ImplementationSpecific\n            backend:\n              service:\n                name: api-domicilio\n                port:\n                  number: 8080\n---\n# API PICKUP DEPLOYMENT\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api-pickup\n  namespace: app-domicilio\nspec:\n  selector:\n    matchLabels:\n      app: client\n      tier: api-pickup\n      track: stable\n  replicas: 1\n  revisionHistoryLimit: 3\n  template:\n    metadata:\n      labels:\n        app: client\n        tier: api-pickup\n        track: stable\n    spec:\n      containers:\n        - name: api-pickup\n          image: "kfcregistry.azurecr.io/pedidos-app-ec/api-pickup:2.0.2"\n          imagePullPolicy: Never\n          envFrom:\n            - secretRef:\n                name: database-config-atlas\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: api-pickup\n  namespace: app-domicilio\nspec:\n  selector:\n    app: client\n    tier: api-pickup\n  ports:\n    - name: http\n      protocol: "TCP"\n      port: 7081\n      targetPort: 80\n    - name: https\n      protocol: "TCP"\n      port: 5443\n      targetPort: 80\n  type: LoadBalancer\n---\n###\n### API PICKUP INGRESS\n###\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: api-pickup\n  namespace: app-domicilio\nspec:\n  ingressClassName: kong\n  rules:\n    - http:\n        paths:\n          - path: /pickup/api/v3\n            pathType: ImplementationSpecific\n            backend:\n              service:\n                name: api-pickup\n                port:\n                  number: 7081\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: distribuidor-queue\n  namespace: app-domicilio\nspec:\n  selector:\n    matchLabels:\n      app: distribuidor\n      tier: distribuidor-queue\n      track: stable\n  replicas: 1\n  revisionHistoryLimit: 3\n  template:\n    metadata:\n      labels:\n        app: distribuidor\n        tier: distribuidor-queue\n        track: stable\n    spec:\n      serviceAccountName: distribuidor-queue\n      containers:\n        - name: distribuidor-queue\n          image: "kfcregistry.azurecr.io/pedidos-app-ec/distribuidor-queue:2.0.2"\n          imagePullPolicy: Never\n          env:\n            - name: COUNTRY_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: country-name\n                  name: database-config-atlas\n            - name: CLOUD_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: cloud-name\n                  name: database-config-atlas\n            - name: NOSQL_TYPE\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-type\n                  name: database-config-atlas\n            - name: NOSQL_URI\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-uri\n                  name: database-config-atlas\n            - name: NOSQL_COSMOSDB_HOST\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-cosmosdb-host\n                  name: database-config-atlas\n            - name: NOSQL_COSMOSDB_MASTERKEY\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-cosmosdb-masterkey\n                  name: database-config-atlas\n            - name: DATABASE_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: database-name\n                  name: database-config-atlas\n            - name: URL_AZURE_SQL_SERVER\n              valueFrom:\n                secretKeyRef:\n                  key: url-azure-sql-server\n                  name: database-config-atlas\n            - name: URL_AZURE_API_DOMICILIO\n              valueFrom:\n                secretKeyRef:\n                  key: url-azure-api-domicilio\n                  name: database-config-atlas\n---\n###\n### DISTRIBUIDOR QUEUE\n###\napiVersion: v1\nkind: Service\nmetadata:\n  name: distribuidor-queue\n  namespace: app-domicilio\nspec:\n  selector:\n    app: distribuidor\n    tier: distribuidor-queue\n  ports:\n    - protocol: "TCP"\n      port: 80\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: queue-resolver-1\n  namespace: app-domicilio\nspec:\n  selector:\n    matchLabels:\n      app: queue-resolver\n      tier: queue-resolver-1\n      track: stable\n  replicas: 1\n  revisionHistoryLimit: 0\n  template:\n    metadata:\n      labels:\n        app: queue-resolver\n        tier: queue-resolver-1\n        track: stable\n    spec:\n      containers:\n        - name: queue-resolver-1\n          image: "kfcregistry.azurecr.io/pedidos-app-ec/queue-resolver:2.0.2"\n          imagePullPolicy: Never\n          envFrom:\n            - secretRef:\n                name: database-config-atlas\n---\n###\n### QUEUE RESOLVER #1\n###\napiVersion: v1\nkind: Service\nmetadata:\n  name: queue-resolver-1\n  namespace: app-domicilio\nspec:\n  selector:\n    app: queue-resolver\n    tier: queue-resolver-1\n  ports:\n    - protocol: "TCP"\n      port: 80\n      targetPort: 80\n---\n###\n### API AUTH (PANEL)\n###\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api-auth\n  namespace: app-domicilio\nspec:\n  selector:\n    matchLabels:\n      app: auth\n      tier: api-auth\n      track: stable\n  replicas: 1\n  revisionHistoryLimit: 2\n  template:\n    metadata:\n      labels:\n        app: auth\n        tier: api-auth\n        track: stable\n    spec:\n      containers:\n        - name: api-auth\n          image: "kfcregistry.azurecr.io/pedidos-app-ec/auth:2.0.2"\n          imagePullPolicy: Never\n          env:\n            - name: COUNTRY_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: country-name\n                  name: database-config-atlas\n            - name: CLOUD_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: cloud-name\n                  name: database-config-atlas\n            - name: NOSQL_TYPE\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-type\n                  name: database-config-atlas\n            - name: NOSQL_URI\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-uri\n                  name: database-config-atlas\n            - name: NOSQL_COSMOSDB_HOST\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-cosmosdb-host\n                  name: database-config-atlas\n            - name: NOSQL_COSMOSDB_MASTERKEY\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-cosmosdb-masterkey\n                  name: database-config-atlas\n            - name: DATABASE_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: database-name\n                  name: database-config-atlas\n            - name: URL_AZURE_SQL_SERVER\n              valueFrom:\n                secretKeyRef:\n                  key: url-azure-sql-server\n                  name: database-config-atlas\n            - name: URL_AZURE_API_DOMICILIO\n              valueFrom:\n                secretKeyRef:\n                  key: url-azure-api-domicilio\n                  name: database-config-atlas\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: api-auth\n  namespace: app-domicilio\nspec:\n  selector:\n    app: auth\n    tier: api-auth\n  ports:\n    - protocol: "TCP"\n      port: 80\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: api-auth\n  namespace: app-domicilio\nspec:\n  ingressClassName: kong\n  rules:\n    - http:\n        paths:\n          - path: /api/auth\n            pathType: ImplementationSpecific\n            backend:\n              service:\n                name: api-auth\n                port:\n                  number: 80\n---\n###\n### API ADMIN (PANEL)\n###\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api-admin\n  namespace: app-domicilio\nspec:\n  selector:\n    matchLabels:\n      app: admin\n      tier: api-admin\n      track: stable\n  replicas: 1\n  revisionHistoryLimit: 2\n  template:\n    metadata:\n      labels:\n        app: admin\n        tier: api-admin\n        track: stable\n    spec:\n      containers:\n        - name: api-admin\n          image: "kfcregistry.azurecr.io/pedidos-app-ec/admin:2.0.2"\n          imagePullPolicy: Never\n          env:\n            - name: COUNTRY_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: country-name\n                  name: database-config-atlas\n            - name: CLOUD_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: cloud-name\n                  name: database-config-atlas\n            - name: NOSQL_TYPE\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-type\n                  name: database-config-atlas\n            - name: NOSQL_URI\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-uri\n                  name: database-config-atlas\n            - name: NOSQL_COSMOSDB_HOST\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-cosmosdb-host\n                  name: database-config-atlas\n            - name: NOSQL_COSMOSDB_MASTERKEY\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-cosmosdb-masterkey\n                  name: database-config-atlas\n            - name: DATABASE_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: database-name\n                  name: database-config-atlas\n            - name: URL_AZURE_SQL_SERVER\n              valueFrom:\n                secretKeyRef:\n                  key: url-azure-sql-server\n                  name: database-config-atlas\n            - name: URL_AZURE_API_DOMICILIO\n              valueFrom:\n                secretKeyRef:\n                  key: url-azure-api-domicilio\n                  name: database-config-atlas\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: api-admin\n  namespace: app-domicilio\nspec:\n  selector:\n    app: admin\n    tier: api-admin\n  ports:\n    - protocol: "TCP"\n      port: 80\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: api-admin\n  namespace: app-domicilio\nspec:\n  ingressClassName: kong\n  rules:\n    - http:\n        paths:\n          - path: /api/admin\n            pathType: ImplementationSpecific\n            backend:\n              service:\n                name: api-admin\n                port:\n                  number: 80\n---\n###\n### LOG ENTRY API (PANEL)\n###\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: log-entry\n  namespace: app-domicilio\nspec:\n  selector:\n    matchLabels:\n      app: logger\n      tier: log-entry\n      track: stable\n  replicas: 1\n  revisionHistoryLimit: 2\n  template:\n    metadata:\n      labels:\n        app: logger\n        tier: log-entry\n        track: stable\n    spec:\n      containers:\n        - name: log-entry\n          image: "kfcregistry.azurecr.io/pedidos-app-ec/log-entry:2.0.2"\n          imagePullPolicy: Never\n          env:\n            - name: COUNTRY_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: country-name\n                  name: database-config-atlas\n            - name: CLOUD_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: cloud-name\n                  name: database-config-atlas\n            - name: NOSQL_TYPE\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-type\n                  name: database-config-atlas\n            - name: NOSQL_URI\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-uri\n                  name: database-config-atlas\n            - name: NOSQL_COSMOSDB_HOST\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-cosmosdb-host\n                  name: database-config-atlas\n            - name: NOSQL_COSMOSDB_MASTERKEY\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-cosmosdb-masterkey\n                  name: database-config-atlas\n            - name: DATABASE_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: database-name\n                  name: database-config-atlas\n            - name: URL_AZURE_SQL_SERVER\n              valueFrom:\n                secretKeyRef:\n                  key: url-azure-sql-server\n                  name: database-config-atlas\n            - name: URL_AZURE_API_DOMICILIO\n              valueFrom:\n                secretKeyRef:\n                  key: url-azure-api-domicilio\n                  name: database-config-atlas\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: log-entry\n  namespace: app-domicilio\nspec:\n  selector:\n    app: logger\n    tier: log-entry\n  ports:\n    - protocol: "TCP"\n      port: 80\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: log-entry\n  namespace: app-domicilio\nspec:\n  ingressClassName: kong\n  rules:\n    - http:\n        paths:\n          - path: /api/logger\n            pathType: ImplementationSpecific\n            backend:\n              service:\n                name: log-entry\n                port:\n                  number: 80\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: api-health\n  namespace: app-domicilio\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: api-health\n  namespace: app-domicilio\nrules:\n  - apiGroups: [""]\n    resources: ["pods"]\n    verbs: ["list", "watch", "get"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: api-health\n  namespace: app-domicilio\nroleRef:\n  kind: Role\n  name: api-health\n  apiGroup: rbac.authorization.k8s.io\nsubjects:\n  - kind: ServiceAccount\n    name: api-health\n    namespace: app-domicilio\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api-health\n  namespace: app-domicilio\nspec:\n  selector:\n    matchLabels:\n      app: health\n      tier: api-health\n      track: stable\n  replicas: 1\n  revisionHistoryLimit: 2\n  template:\n    metadata:\n      labels:\n        app: health\n        tier: api-health\n        track: stable\n    spec:\n      serviceAccountName: api-health\n      containers:\n        - name: api-health\n          image: "kfcregistry.azurecr.io/pedidos-app-ec/health:2.0.2"\n          imagePullPolicy: Never\n          env:\n            - name: COUNTRY_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: country-name\n                  name: database-config-atlas\n            - name: CLOUD_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: cloud-name\n                  name: database-config-atlas\n            - name: NOSQL_TYPE\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-type\n                  name: database-config-atlas\n            - name: NOSQL_URI\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-uri\n                  name: database-config-atlas\n            - name: NOSQL_COSMOSDB_HOST\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-cosmosdb-host\n                  name: database-config-atlas\n            - name: NOSQL_COSMOSDB_MASTERKEY\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-cosmosdb-masterkey\n                  name: database-config-atlas\n            - name: DATABASE_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: database-name\n                  name: database-config-atlas\n            - name: URL_AZURE_SQL_SERVER\n              valueFrom:\n                secretKeyRef:\n                  key: url-azure-sql-server\n                  name: database-config-atlas\n            - name: URL_AZURE_API_DOMICILIO\n              valueFrom:\n                secretKeyRef:\n                  key: url-azure-api-domicilio\n                  name: database-config-atlas\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: api-health\n  namespace: app-domicilio\nspec:\n  selector:\n    app: health\n    tier: api-health\n  ports:\n    - protocol: "TCP"\n      port: 80\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: api-health\n  namespace: app-domicilio\n\nspec:\n  ingressClassName: kong\n  rules:\n    - http:\n        paths:\n          - path: /api/health\n            pathType: ImplementationSpecific\n            backend:\n              service:\n                name: api-health\n                port:\n                  number: 80\n---\n# API STATUS DEPLOYMENT\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api-status\n  namespace: app-domicilio\nspec:\n  selector:\n    matchLabels:\n      app: status\n      tier: api-status\n      track: stable\n  replicas: 1\n  revisionHistoryLimit: 3\n  template:\n    metadata:\n      labels:\n        app: status\n        tier: api-status\n        track: stable\n    spec:\n      containers:\n        - name: api-status\n          image: "kfcregistry.azurecr.io/pedidos-app-ec/api-status:2.0.2"\n          imagePullPolicy: Never\n          env:\n            - name: COUNTRY_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: country-name\n                  name: database-config-atlas\n            - name: CLOUD_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: cloud-name\n                  name: database-config-atlas\n            - name: NOSQL_TYPE\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-type\n                  name: database-config-atlas\n            - name: NOSQL_URI\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-uri\n                  name: database-config-atlas\n            - name: NOSQL_COSMOSDB_HOST\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-cosmosdb-host\n                  name: database-config-atlas\n            - name: NOSQL_COSMOSDB_MASTERKEY\n              valueFrom:\n                secretKeyRef:\n                  key: nosql-cosmosdb-masterkey\n                  name: database-config-atlas\n            - name: DATABASE_NAME\n              valueFrom:\n                secretKeyRef:\n                  key: database-name\n                  name: database-config-atlas\n            - name: URL_AZURE_SQL_SERVER\n              valueFrom:\n                secretKeyRef:\n                  key: url-azure-sql-server\n                  name: database-config-atlas\n            - name: URL_AZURE_API_DOMICILIO\n              valueFrom:\n                secretKeyRef:\n                  key: url-azure-api-domicilio\n                  name: database-config-atlas\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: api-status\n  namespace: app-domicilio\nspec:\n  selector:\n    app: status\n    tier: api-status\n  ports:\n    - name: http\n      protocol: "TCP"\n      port: 8080\n      targetPort: 80\n  type: LoadBalancer\n---\n###\n### API STATUS\n###\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: api-status\n  namespace: app-domicilio\nspec:\n  ingressClassName: kong\n  rules:\n    - http:\n        paths:\n          - path: /api/status\n            pathType: ImplementationSpecific\n            backend:\n              service:\n                name: api-status\n                port:\n                  number: 8080\n')),(0,i.kt)("p",null,"Ahora, se ejecuta el siguiente comando:  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl apply -f "C:\\Users\\f-perez\\IdeaProjects\\compras-programadas V2\\uk8s-resources\\k8s-deployer\\install-localhost.yaml"\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Resultado:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"\nnamespace/app-domicilio created\nrolebinding.rbac.authorization.k8s.io/distribuidor-queue created\nrole.rbac.authorization.k8s.io/distribuidor-queue created\nserviceaccount/distribuidor-queue created\ndeployment.apps/api-domicilio created\nservice/api-domicilio created\ningress.networking.k8s.io/api-domicilio created\ndeployment.apps/api-pickup created\nservice/api-pickup created\ningress.networking.k8s.io/api-pickup created\ndeployment.apps/distribuidor-queue created\nservice/distribuidor-queue created\ndeployment.apps/queue-resolver-1 created\nservice/queue-resolver-1 created\ndeployment.apps/api-auth created\nservice/api-auth created\ningress.networking.k8s.io/api-auth created\ndeployment.apps/api-admin created\nservice/api-admin created\ningress.networking.k8s.io/api-admin created\ndeployment.apps/log-entry created\nservice/log-entry created\ningress.networking.k8s.io/log-entry created\nserviceaccount/api-health created\nrole.rbac.authorization.k8s.io/api-health created\nrolebinding.rbac.authorization.k8s.io/api-health created\ndeployment.apps/api-health created\nservice/api-health created\ningress.networking.k8s.io/api-health created\ndeployment.apps/api-status created\n\n\nnamespace/app-domicilio unchanged  \nrolebinding.rbac.authorization.k8s.io/distribuidor-queue unchanged  \nrole.rbac.authorization.k8s.io/distribuidor-queue unchanged  \nserviceaccount/distribuidor-queue unchanged  \ndeployment.apps/api-domicilio created  \nservice/api-domicilio created  \ningress.networking.k8s.io/api-domicilio created  \ndeployment.apps/api-pickup created  \nservice/api-pickup created  \ningress.networking.k8s.io/api-pickup created  \ndeployment.apps/distribuidor-queue created  \nservice/distribuidor-queue created  \ndeployment.apps/queue-resolver-1 created  \nservice/queue-resolver-1 created  \ndeployment.apps/api-auth created  \nservice/api-auth created  \ningress.networking.k8s.io/api-auth created  \ndeployment.apps/api-admin created  \nservice/api-admin created  \ningress.networking.k8s.io/api-admin created  \ndeployment.apps/log-entry created  \nservice/log-entry created  \ningress.networking.k8s.io/log-entry created  \nserviceaccount/api-health unchanged  \nrole.rbac.authorization.k8s.io/api-health unchanged  \nrolebinding.rbac.authorization.k8s.io/api-health unchanged  \ndeployment.apps/api-health created  \nservice/api-health created  \ningress.networking.k8s.io/api-health created  \ndeployment.apps/api-status created  \nservice/api-status created  \ningress.networking.k8s.io/api-status created\n"))))}d.isMDXComponent=!0}}]);